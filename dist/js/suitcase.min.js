function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}!function(t,e){"function"==typeof define&&define.amd?define(e):"object"==typeof exports?module.exports=e(require,exports,module):t.Tether=e()}(this,function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t){var e=t.getBoundingClientRect(),i={};for(var n in e)i[n]=e[n];if(t.ownerDocument!==document){var r=t.ownerDocument.defaultView.frameElement;if(r){var s=o(r);i.top+=s.top,i.bottom+=s.top,i.left+=s.left,i.right+=s.left}}return i}function r(t){var e=getComputedStyle(t)||{},i=e.position,n=[];if("fixed"===i)return[t];for(var o=t;(o=o.parentNode)&&o&&1===o.nodeType;){var r=void 0;try{r=getComputedStyle(o)}catch(t){}if(void 0===r||null===r)return n.push(o),n;var s=r,a=s.overflow,l=s.overflowX;/(auto|scroll)/.test(a+s.overflowY+l)&&("absolute"!==i||["relative","absolute","fixed"].indexOf(r.position)>=0)&&n.push(o)}return n.push(t.ownerDocument.body),t.ownerDocument!==document&&n.push(t.ownerDocument.defaultView),n}function s(){S&&document.body.removeChild(S),S=null}function a(t){var e=void 0;t===document?(e=document,t=document.documentElement):e=t.ownerDocument;var i=e.documentElement,n=o(t),r=D();return n.top-=r.top,n.left-=r.left,void 0===n.width&&(n.width=document.body.scrollWidth-n.left-n.right),void 0===n.height&&(n.height=document.body.scrollHeight-n.top-n.bottom),n.top=n.top-i.clientTop,n.left=n.left-i.clientLeft,n.right=e.body.clientWidth-n.width-n.left,n.bottom=e.body.clientHeight-n.height-n.top,n}function l(t){return t.offsetParent||document.documentElement}function h(){if(I)return I;var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");f(e.style,{position:"absolute",top:0,left:0,pointerEvents:"none",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),e.appendChild(t),document.body.appendChild(e);var i=t.offsetWidth;e.style.overflow="scroll";var n=t.offsetWidth;i===n&&(n=e.clientWidth),document.body.removeChild(e);var o=i-n;return I={width:o,height:o}}function f(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=[];return Array.prototype.push.apply(e,arguments),e.slice(1).forEach(function(e){if(e)for(var i in e)({}).hasOwnProperty.call(e,i)&&(t[i]=e[i])}),t}function c(t,e){if(void 0!==t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.remove(e)});else{var i=new RegExp("(^| )"+e.split(" ").join("|")+"( |$)","gi"),n=p(t).replace(i," ");g(t,n)}}function d(t,e){if(void 0!==t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.add(e)});else{c(t,e);var i=p(t)+" "+e;g(t,i)}}function u(t,e){if(void 0!==t.classList)return t.classList.contains(e);var i=p(t);return new RegExp("(^| )"+e+"( |$)","gi").test(i)}function p(t){return t.className instanceof t.ownerDocument.defaultView.SVGAnimatedString?t.className.baseVal:t.className}function g(t,e){t.setAttribute("class",e)}function m(t,e,i){i.forEach(function(i){-1===e.indexOf(i)&&u(t,i)&&c(t,i)}),e.forEach(function(e){u(t,e)||d(t,e)})}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _(t,e){var i=arguments.length<=2||void 0===arguments[2]?1:arguments[2];return t+i>=e&&e>=t-i}function y(){return"undefined"!=typeof performance&&void 0!==performance.now?performance.now():+new Date}function b(){for(var t={top:0,left:0},e=arguments.length,i=Array(e),n=0;n<e;n++)i[n]=arguments[n];return i.forEach(function(e){var i=e.top,n=e.left;"string"==typeof i&&(i=parseFloat(i,10)),"string"==typeof n&&(n=parseFloat(n,10)),t.top+=i,t.left+=n}),t}function E(t,e){return"string"==typeof t.left&&-1!==t.left.indexOf("%")&&(t.left=parseFloat(t.left,10)/100*e.width),"string"==typeof t.top&&-1!==t.top.indexOf("%")&&(t.top=parseFloat(t.top,10)/100*e.height),t}function C(t,e){return"scrollParent"===e?e=t.scrollParents[0]:"window"===e&&(e=[pageXOffset,pageYOffset,innerWidth+pageXOffset,innerHeight+pageYOffset]),e===document&&(e=e.documentElement),void 0!==e.nodeType&&function(){var t=e,i=a(e),n=i,o=getComputedStyle(e);if(e=[n.left,n.top,i.width+n.left,i.height+n.top],t.ownerDocument!==document){var r=t.ownerDocument.defaultView;e[0]+=r.pageXOffset,e[1]+=r.pageYOffset,e[2]+=r.pageXOffset,e[3]+=r.pageYOffset}X.forEach(function(t,i){t=t[0].toUpperCase()+t.substr(1),"Top"===t||"Left"===t?e[i]+=parseFloat(o["border"+t+"Width"]):e[i]-=parseFloat(o["border"+t+"Width"])})}(),e}var T=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),w=void 0;void 0===w&&(w={modules:[]});var S=null,O=function(){var t=0;return function(){return++t}}(),A={},D=function(){var t=S;t&&document.body.contains(t)||(t=document.createElement("div"),t.setAttribute("data-tether-id",O()),f(t.style,{top:0,left:0,position:"absolute"}),document.body.appendChild(t),S=t);var e=t.getAttribute("data-tether-id");return void 0===A[e]&&(A[e]=o(t),k(function(){delete A[e]})),A[e]},I=null,N=[],k=function(t){N.push(t)},W=function(){for(var t=void 0;t=N.pop();)t()},H=function(){function t(){n(this,t)}return T(t,[{key:"on",value:function(t,e,i){var n=!(arguments.length<=3||void 0===arguments[3])&&arguments[3];void 0===this.bindings&&(this.bindings={}),void 0===this.bindings[t]&&(this.bindings[t]=[]),this.bindings[t].push({handler:e,ctx:i,once:n})}},{key:"once",value:function(t,e,i){this.on(t,e,i,!0)}},{key:"off",value:function(t,e){if(void 0!==this.bindings&&void 0!==this.bindings[t])if(void 0===e)delete this.bindings[t];else for(var i=0;i<this.bindings[t].length;)this.bindings[t][i].handler===e?this.bindings[t].splice(i,1):++i}},{key:"trigger",value:function(t){if(void 0!==this.bindings&&this.bindings[t]){for(var e=0,i=arguments.length,n=Array(i>1?i-1:0),o=1;o<i;o++)n[o-1]=arguments[o];for(;e<this.bindings[t].length;){var r=this.bindings[t][e],s=r.handler,a=r.ctx,l=r.once,h=a;void 0===h&&(h=this),s.apply(h,n),l?this.bindings[t].splice(e,1):++e}}}}]),t}();w.Utils={getActualBoundingClientRect:o,getScrollParents:r,getBounds:a,getOffsetParent:l,extend:f,addClass:d,removeClass:c,hasClass:u,updateClasses:m,defer:k,flush:W,uniqueId:O,Evented:H,getScrollBarSize:h,removeUtilElements:s};var L=function(){function t(t,e){var i=[],n=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(i.push(s.value),!e||i.length!==e);n=!0);}catch(t){o=!0,r=t}finally{try{!n&&a.return&&a.return()}finally{if(o)throw r}}return i}return function(e,i){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),T=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),x=function(t,e,i){for(var n=!0;n;){var o=t,r=e,s=i;n=!1,null===o&&(o=Function.prototype);var a=Object.getOwnPropertyDescriptor(o,r);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var h=Object.getPrototypeOf(o);if(null===h)return;t=h,e=r,i=s,n=!0,a=h=void 0}};if(void 0===w)throw new Error("You must include the utils.js file before tether.js");var U=w.Utils,r=U.getScrollParents,a=U.getBounds,l=U.getOffsetParent,f=U.extend,d=U.addClass,c=U.removeClass,m=U.updateClasses,k=U.defer,W=U.flush,h=U.getScrollBarSize,s=U.removeUtilElements,P=function(){if("undefined"==typeof document)return"";for(var t=document.createElement("div"),e=["transform","WebkitTransform","OTransform","MozTransform","msTransform"],i=0;i<e.length;++i){var n=e[i];if(void 0!==t.style[n])return n}}(),M=[],R=function(){M.forEach(function(t){t.position(!1)}),W()};!function(){var t=null,e=null,i=null,n=function n(){if(void 0!==e&&e>16)return e=Math.min(e-16,250),void(i=setTimeout(n,250));void 0!==t&&y()-t<10||(null!=i&&(clearTimeout(i),i=null),t=y(),R(),e=y()-t)};"undefined"!=typeof window&&void 0!==window.addEventListener&&["resize","scroll","touchmove"].forEach(function(t){window.addEventListener(t,n)})}();var B={center:"center",left:"right",right:"left"},F={middle:"middle",top:"bottom",bottom:"top"},j={top:0,left:0,middle:"50%",center:"50%",bottom:"100%",right:"100%"},Y=function(t,e){var i=t.left,n=t.top;return"auto"===i&&(i=B[e.left]),"auto"===n&&(n=F[e.top]),{left:i,top:n}},z=function(t){var e=t.left,i=t.top;return void 0!==j[t.left]&&(e=j[t.left]),void 0!==j[t.top]&&(i=j[t.top]),{left:e,top:i}},K=function(t){var e=t.split(" "),i=L(e,2);return{top:i[0],left:i[1]}},V=K,G=function(t){function e(t){var i=this;n(this,e),x(Object.getPrototypeOf(e.prototype),"constructor",this).call(this),this.position=this.position.bind(this),M.push(this),this.history=[],this.setOptions(t,!1),w.modules.forEach(function(t){void 0!==t.initialize&&t.initialize.call(i)}),this.position()}return v(e,t),T(e,[{key:"getClass",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=this.options.classes;return void 0!==e&&e[t]?this.options.classes[t]:this.options.classPrefix?this.options.classPrefix+"-"+t:t}},{key:"setOptions",value:function(t){var e=this,i=arguments.length<=1||void 0===arguments[1]||arguments[1],n={offset:"0 0",targetOffset:"0 0",targetAttachment:"auto auto",classPrefix:"tether"};this.options=f(n,t);var o=this.options,s=o.element,a=o.target,l=o.targetModifier;if(this.element=s,this.target=a,this.targetModifier=l,"viewport"===this.target?(this.target=document.body,this.targetModifier="visible"):"scroll-handle"===this.target&&(this.target=document.body,this.targetModifier="scroll-handle"),["element","target"].forEach(function(t){if(void 0===e[t])throw new Error("Tether Error: Both element and target must be defined");void 0!==e[t].jquery?e[t]=e[t][0]:"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),d(this.element,this.getClass("element")),!1!==this.options.addTargetClasses&&d(this.target,this.getClass("target")),!this.options.attachment)throw new Error("Tether Error: You must provide an attachment");this.targetAttachment=V(this.options.targetAttachment),this.attachment=V(this.options.attachment),this.offset=K(this.options.offset),this.targetOffset=K(this.options.targetOffset),void 0!==this.scrollParents&&this.disable(),"scroll-handle"===this.targetModifier?this.scrollParents=[this.target]:this.scrollParents=r(this.target),!1!==this.options.enabled&&this.enable(i)}},{key:"getTargetBounds",value:function(){if(void 0===this.targetModifier)return a(this.target);if("visible"===this.targetModifier){if(this.target===document.body)return{top:pageYOffset,left:pageXOffset,height:innerHeight,width:innerWidth};var t=a(this.target),e={height:t.height,width:t.width,top:t.top,left:t.left};return e.height=Math.min(e.height,t.height-(pageYOffset-t.top)),e.height=Math.min(e.height,t.height-(t.top+t.height-(pageYOffset+innerHeight))),e.height=Math.min(innerHeight,e.height),e.height-=2,e.width=Math.min(e.width,t.width-(pageXOffset-t.left)),e.width=Math.min(e.width,t.width-(t.left+t.width-(pageXOffset+innerWidth))),e.width=Math.min(innerWidth,e.width),e.width-=2,e.top<pageYOffset&&(e.top=pageYOffset),e.left<pageXOffset&&(e.left=pageXOffset),e}if("scroll-handle"===this.targetModifier){var t=void 0,i=this.target;i===document.body?(i=document.documentElement,t={left:pageXOffset,top:pageYOffset,height:innerHeight,width:innerWidth}):t=a(i);var n=getComputedStyle(i),o=i.scrollWidth>i.clientWidth||[n.overflow,n.overflowX].indexOf("scroll")>=0||this.target!==document.body,r=0;o&&(r=15);var s=t.height-parseFloat(n.borderTopWidth)-parseFloat(n.borderBottomWidth)-r,e={width:15,height:.975*s*(s/i.scrollHeight),left:t.left+t.width-parseFloat(n.borderLeftWidth)-15},l=0;s<408&&this.target===document.body&&(l=-11e-5*Math.pow(s,2)-.00727*s+22.58),this.target!==document.body&&(e.height=Math.max(e.height,24));var h=this.target.scrollTop/(i.scrollHeight-s);return e.top=h*(s-e.height-l)+t.top+parseFloat(n.borderTopWidth),this.target===document.body&&(e.height=Math.max(e.height,24)),e}}},{key:"clearCache",value:function(){this._cache={}}},{key:"cache",value:function(t,e){return void 0===this._cache&&(this._cache={}),void 0===this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]}},{key:"enable",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]||arguments[0];!1!==this.options.addTargetClasses&&d(this.target,this.getClass("enabled")),d(this.element,this.getClass("enabled")),this.enabled=!0,this.scrollParents.forEach(function(e){e!==t.target.ownerDocument&&e.addEventListener("scroll",t.position)}),e&&this.position()}},{key:"disable",value:function(){var t=this;c(this.target,this.getClass("enabled")),c(this.element,this.getClass("enabled")),this.enabled=!1,void 0!==this.scrollParents&&this.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.position)})}},{key:"destroy",value:function(){var t=this;this.disable(),M.forEach(function(e,i){e===t&&M.splice(i,1)}),0===M.length&&s()}},{key:"updateAttachClasses",value:function(t,e){var i=this;t=t||this.attachment,e=e||this.targetAttachment;var n=["left","top","bottom","right","middle","center"];void 0!==this._addAttachClasses&&this._addAttachClasses.length&&this._addAttachClasses.splice(0,this._addAttachClasses.length),void 0===this._addAttachClasses&&(this._addAttachClasses=[]);var o=this._addAttachClasses;t.top&&o.push(this.getClass("element-attached")+"-"+t.top),t.left&&o.push(this.getClass("element-attached")+"-"+t.left),e.top&&o.push(this.getClass("target-attached")+"-"+e.top),e.left&&o.push(this.getClass("target-attached")+"-"+e.left);var r=[];n.forEach(function(t){r.push(i.getClass("element-attached")+"-"+t),r.push(i.getClass("target-attached")+"-"+t)}),k(function(){void 0!==i._addAttachClasses&&(m(i.element,i._addAttachClasses,r),!1!==i.options.addTargetClasses&&m(i.target,i._addAttachClasses,r),delete i._addAttachClasses)})}},{key:"position",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]||arguments[0];if(this.enabled){this.clearCache();var i=Y(this.targetAttachment,this.attachment);this.updateAttachClasses(this.attachment,i);var n=this.cache("element-bounds",function(){return a(t.element)}),o=n.width,r=n.height;if(0===o&&0===r&&void 0!==this.lastSize){var s=this.lastSize;o=s.width,r=s.height}else this.lastSize={width:o,height:r};var f=this.cache("target-bounds",function(){return t.getTargetBounds()}),c=f,d=E(z(this.attachment),{width:o,height:r}),u=E(z(i),c),p=E(this.offset,{width:o,height:r}),g=E(this.targetOffset,c);d=b(d,p),u=b(u,g);for(var m=f.left+u.left-d.left,v=f.top+u.top-d.top,_=0;_<w.modules.length;++_){var y=w.modules[_],C=y.position.call(this,{left:m,top:v,targetAttachment:i,targetPos:f,elementPos:n,offset:d,targetOffset:u,manualOffset:p,manualTargetOffset:g,scrollbarSize:A,attachment:this.attachment});if(!1===C)return!1;void 0!==C&&"object"==typeof C&&(v=C.top,m=C.left)}var T={page:{top:v,left:m},viewport:{top:v-pageYOffset,bottom:pageYOffset-v-r+innerHeight,left:m-pageXOffset,right:pageXOffset-m-o+innerWidth}},S=this.target.ownerDocument,O=S.defaultView,A=void 0;return O.innerHeight>S.documentElement.clientHeight&&(A=this.cache("scrollbar-size",h),T.viewport.bottom-=A.height),O.innerWidth>S.documentElement.clientWidth&&(A=this.cache("scrollbar-size",h),T.viewport.right-=A.width),-1!==["","static"].indexOf(S.body.style.position)&&-1!==["","static"].indexOf(S.body.parentElement.style.position)||(T.page.bottom=S.body.scrollHeight-v-r,T.page.right=S.body.scrollWidth-m-o),void 0!==this.options.optimizations&&!1!==this.options.optimizations.moveElement&&void 0===this.targetModifier&&function(){var e=t.cache("target-offsetparent",function(){return l(t.target)}),i=t.cache("target-offsetparent-bounds",function(){return a(e)}),n=getComputedStyle(e),o=i,r={};if(["Top","Left","Bottom","Right"].forEach(function(t){r[t.toLowerCase()]=parseFloat(n["border"+t+"Width"])}),i.right=S.body.scrollWidth-i.left-o.width+r.right,i.bottom=S.body.scrollHeight-i.top-o.height+r.bottom,T.page.top>=i.top+r.top&&T.page.bottom>=i.bottom&&T.page.left>=i.left+r.left&&T.page.right>=i.right){var s=e.scrollTop,h=e.scrollLeft;T.offset={top:T.page.top-i.top+s-r.top,left:T.page.left-i.left+h-r.left}}}(),this.move(T),this.history.unshift(T),this.history.length>3&&this.history.pop(),e&&W(),!0}}},{key:"move",value:function(t){var e=this;if(void 0!==this.element.parentNode){var i={};for(var n in t){i[n]={};for(var o in t[n]){for(var r=!1,s=0;s<this.history.length;++s){var a=this.history[s];if(void 0!==a[n]&&!_(a[n][o],t[n][o])){r=!0;break}}r||(i[n][o]=!0)}}var h={top:"",left:"",right:"",bottom:""},c=function(t,i){if(!1!==(void 0!==e.options.optimizations?e.options.optimizations.gpu:null)){var n=void 0,o=void 0;t.top?(h.top=0,n=i.top):(h.bottom=0,n=-i.bottom),t.left?(h.left=0,o=i.left):(h.right=0,o=-i.right),window.matchMedia&&(window.matchMedia("only screen and (min-resolution: 1.3dppx)").matches||window.matchMedia("only screen and (-webkit-min-device-pixel-ratio: 1.3)").matches||(o=Math.round(o),n=Math.round(n))),h[P]="translateX("+o+"px) translateY("+n+"px)","msTransform"!==P&&(h[P]+=" translateZ(0)")}else t.top?h.top=i.top+"px":h.bottom=i.bottom+"px",t.left?h.left=i.left+"px":h.right=i.right+"px"},d=!1;if((i.page.top||i.page.bottom)&&(i.page.left||i.page.right)?(h.position="absolute",c(i.page,t.page)):(i.viewport.top||i.viewport.bottom)&&(i.viewport.left||i.viewport.right)?(h.position="fixed",c(i.viewport,t.viewport)):void 0!==i.offset&&i.offset.top&&i.offset.left?function(){h.position="absolute";var n=e.cache("target-offsetparent",function(){return l(e.target)});l(e.element)!==n&&k(function(){e.element.parentNode.removeChild(e.element),n.appendChild(e.element)}),c(i.offset,t.offset),d=!0}():(h.position="absolute",c({top:!0,left:!0},t.page)),!d)if(this.options.bodyElement)this.options.bodyElement.appendChild(this.element);else{for(var u=!0,p=this.element.parentNode;p&&1===p.nodeType&&"BODY"!==p.tagName;){if("static"!==getComputedStyle(p).position){u=!1;break}p=p.parentNode}u||(this.element.parentNode.removeChild(this.element),this.element.ownerDocument.body.appendChild(this.element))}var g={},m=!1;for(var o in h){var v=h[o];this.element.style[o]!==v&&(m=!0,g[o]=v)}m&&k(function(){f(e.element.style,g),e.trigger("repositioned")})}}}]),e}(H);G.modules=[],w.position=R;var Q=f(G,w),L=function(){function t(t,e){var i=[],n=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(i.push(s.value),!e||i.length!==e);n=!0);}catch(t){o=!0,r=t}finally{try{!n&&a.return&&a.return()}finally{if(o)throw r}}return i}return function(e,i){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),U=w.Utils,a=U.getBounds,f=U.extend,m=U.updateClasses,k=U.defer,X=["left","top","right","bottom"];w.modules.push({position:function(t){var e=this,i=t.top,n=t.left,o=t.targetAttachment;if(!this.options.constraints)return!0;var r=this.cache("element-bounds",function(){return a(e.element)}),s=r.height,l=r.width;if(0===l&&0===s&&void 0!==this.lastSize){var h=this.lastSize;l=h.width,s=h.height}var c=this.cache("target-bounds",function(){return e.getTargetBounds()}),d=c.height,u=c.width,p=[this.getClass("pinned"),this.getClass("out-of-bounds")];this.options.constraints.forEach(function(t){var e=t.outOfBoundsClass,i=t.pinnedClass;e&&p.push(e),i&&p.push(i)}),p.forEach(function(t){["left","top","right","bottom"].forEach(function(e){p.push(t+"-"+e)})});var g=[],v=f({},o),_=f({},this.attachment);return this.options.constraints.forEach(function(t){var r=t.to,a=t.attachment,h=t.pin;void 0===a&&(a="");var f=void 0,c=void 0;if(a.indexOf(" ")>=0){var p=a.split(" "),m=L(p,2);c=m[0],f=m[1]}else f=c=a;var y=C(e,r);"target"!==c&&"both"!==c||(i<y[1]&&"top"===v.top&&(i+=d,v.top="bottom"),i+s>y[3]&&"bottom"===v.top&&(i-=d,v.top="top")),"together"===c&&("top"===v.top&&("bottom"===_.top&&i<y[1]?(i+=d,v.top="bottom",i+=s,_.top="top"):"top"===_.top&&i+s>y[3]&&i-(s-d)>=y[1]&&(i-=s-d,v.top="bottom",_.top="bottom")),"bottom"===v.top&&("top"===_.top&&i+s>y[3]?(i-=d,v.top="top",i-=s,_.top="bottom"):"bottom"===_.top&&i<y[1]&&i+(2*s-d)<=y[3]&&(i+=s-d,v.top="top",_.top="top")),"middle"===v.top&&(i+s>y[3]&&"top"===_.top?(i-=s,_.top="bottom"):i<y[1]&&"bottom"===_.top&&(i+=s,_.top="top"))),"target"!==f&&"both"!==f||(n<y[0]&&"left"===v.left&&(n+=u,v.left="right"),n+l>y[2]&&"right"===v.left&&(n-=u,v.left="left")),"together"===f&&(n<y[0]&&"left"===v.left?"right"===_.left?(n+=u,v.left="right",n+=l,_.left="left"):"left"===_.left&&(n+=u,v.left="right",n-=l,_.left="right"):n+l>y[2]&&"right"===v.left?"left"===_.left?(n-=u,v.left="left",n-=l,_.left="right"):"right"===_.left&&(n-=u,v.left="left",n+=l,_.left="left"):"center"===v.left&&(n+l>y[2]&&"left"===_.left?(n-=l,_.left="right"):n<y[0]&&"right"===_.left&&(n+=l,_.left="left"))),"element"!==c&&"both"!==c||(i<y[1]&&"bottom"===_.top&&(i+=s,_.top="top"),i+s>y[3]&&"top"===_.top&&(i-=s,_.top="bottom")),"element"!==f&&"both"!==f||(n<y[0]&&("right"===_.left?(n+=l,_.left="left"):"center"===_.left&&(n+=l/2,_.left="left")),n+l>y[2]&&("left"===_.left?(n-=l,_.left="right"):"center"===_.left&&(n-=l/2,_.left="right"))),"string"==typeof h?h=h.split(",").map(function(t){return t.trim()}):!0===h&&(h=["top","left","right","bottom"]),h=h||[];var b=[],E=[];i<y[1]&&(h.indexOf("top")>=0?(i=y[1],b.push("top")):E.push("top")),i+s>y[3]&&(h.indexOf("bottom")>=0?(i=y[3]-s,b.push("bottom")):E.push("bottom")),n<y[0]&&(h.indexOf("left")>=0?(n=y[0],b.push("left")):E.push("left")),n+l>y[2]&&(h.indexOf("right")>=0?(n=y[2]-l,b.push("right")):E.push("right")),b.length&&function(){var t=void 0;t=void 0!==e.options.pinnedClass?e.options.pinnedClass:e.getClass("pinned"),g.push(t),b.forEach(function(e){g.push(t+"-"+e)})}(),E.length&&function(){var t=void 0;t=void 0!==e.options.outOfBoundsClass?e.options.outOfBoundsClass:e.getClass("out-of-bounds"),g.push(t),E.forEach(function(e){g.push(t+"-"+e)})}(),(b.indexOf("left")>=0||b.indexOf("right")>=0)&&(_.left=v.left=!1),(b.indexOf("top")>=0||b.indexOf("bottom")>=0)&&(_.top=v.top=!1),v.top===o.top&&v.left===o.left&&_.top===e.attachment.top&&_.left===e.attachment.left||(e.updateAttachClasses(_,v),e.trigger("update",{attachment:_,targetAttachment:v}))}),k(function(){!1!==e.options.addTargetClasses&&m(e.target,g,p),m(e.element,g,p)}),{top:i,left:n}}});var U=w.Utils,a=U.getBounds,m=U.updateClasses,k=U.defer;w.modules.push({position:function(t){var e=this,i=t.top,n=t.left,o=this.cache("element-bounds",function(){return a(e.element)}),r=o.height,s=o.width,l=this.getTargetBounds(),h=i+r,f=n+s,c=[];i<=l.bottom&&h>=l.top&&["left","right"].forEach(function(t){var e=l[t];e!==n&&e!==f||c.push(t)}),n<=l.right&&f>=l.left&&["top","bottom"].forEach(function(t){var e=l[t];e!==i&&e!==h||c.push(t)});var d=[],u=[],p=["left","top","right","bottom"];return d.push(this.getClass("abutted")),p.forEach(function(t){d.push(e.getClass("abutted")+"-"+t)}),c.length&&u.push(this.getClass("abutted")),c.forEach(function(t){u.push(e.getClass("abutted")+"-"+t)}),k(function(){!1!==e.options.addTargetClasses&&m(e.target,u,d),m(e.element,u,d)}),!0}});var L=function(){function t(t,e){var i=[],n=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(i.push(s.value),!e||i.length!==e);n=!0);}catch(t){o=!0,r=t}finally{try{!n&&a.return&&a.return()}finally{if(o)throw r}}return i}return function(e,i){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();return w.modules.push({position:function(t){var e=t.top,i=t.left;if(this.options.shift){var n=this.options.shift;"function"==typeof this.options.shift&&(n=this.options.shift.call(this,{top:e,left:i}));var o=void 0,r=void 0;if("string"==typeof n){n=n.split(" "),n[1]=n[1]||n[0];var s=n,a=L(s,2);o=a[0],r=a[1],o=parseFloat(o,10),r=parseFloat(r,10)}else o=n.top,r=n.left;return e+=o,i+=r,{top:e,left:i}}}}),Q});var Util=function(t){function e(t){return{}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function i(t){return(t[0]||t).nodeType}function n(){return{bindType:s.end,delegateType:s.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}}function o(){if(window.QUnit)return!1;var t=document.createElement("bootstrap");for(var e in a)if(void 0!==t.style[e])return{end:a[e]};return!1}function r(e){var i=this,n=!1;return t(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(i)},e),this}var s=!1,a={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},l={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");return e||(e=t.getAttribute("href")||"",e=/^#[a-z]/i.test(e)?e:null),e},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger(s.end)},supportsTransitionEnd:function(){return Boolean(s)},typeCheckConfig:function(t,n,o){for(var r in o)if(o.hasOwnProperty(r)){var s=o[r],a=n[r],l=a&&i(a)?"element":e(a);if(!new RegExp(s).test(l))throw new Error(t.toUpperCase()+': Option "'+r+'" provided type "'+l+'" but expected type "'+s+'".')}}};return function(){s=o(),t.fn.emulateTransitionEnd=r,l.supportsTransitionEnd()&&(t.event.special[l.TRANSITION_END]=n())}(),l}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_createClass=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),Modal=function(t){var e="modal",i=".bs.modal",n=t.fn[e],o={backdrop:!0,keyboard:!0,focus:!0,show:!0},r={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},s={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},a={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},l={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"},h=function(){function n(e,i){_classCallCheck(this,n),this._config=this._getConfig(i),this._element=e,this._dialog=t(e).find(l.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return n.prototype.toggle=function(t){return this._isShown?this.hide():this.show(t)},n.prototype.show=function(e){var i=this;if(this._isTransitioning)throw new Error("Modal is transitioning");Util.supportsTransitionEnd()&&t(this._element).hasClass(a.FADE)&&(this._isTransitioning=!0);var n=t.Event(s.SHOW,{relatedTarget:e});t(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),t(document.body).addClass(a.OPEN),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(s.CLICK_DISMISS,l.DATA_DISMISS,function(t){return i.hide(t)}),t(this._dialog).on(s.MOUSEDOWN_DISMISS,function(){t(i._element).one(s.MOUSEUP_DISMISS,function(e){t(e.target).is(i._element)&&(i._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return i._showElement(e)}))},n.prototype.hide=function(e){var i=this;if(e&&e.preventDefault(),this._isTransitioning)throw new Error("Modal is transitioning");var n=Util.supportsTransitionEnd()&&t(this._element).hasClass(a.FADE);n&&(this._isTransitioning=!0);var o=t.Event(s.HIDE);t(this._element).trigger(o),this._isShown&&!o.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),t(document).off(s.FOCUSIN),t(this._element).removeClass(a.SHOW),t(this._element).off(s.CLICK_DISMISS),t(this._dialog).off(s.MOUSEDOWN_DISMISS),n?t(this._element).one(Util.TRANSITION_END,function(t){return i._hideModal(t)}).emulateTransitionEnd(300):this._hideModal())},n.prototype.dispose=function(){t.removeData(this._element,"bs.modal"),t(window,document,this._element,this._backdrop).off(i),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._originalBodyPadding=null,this._scrollbarWidth=null},n.prototype._getConfig=function(i){return i=t.extend({},o,i),Util.typeCheckConfig(e,i,r),i},n.prototype._showElement=function(e){var i=this,n=Util.supportsTransitionEnd()&&t(this._element).hasClass(a.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&Util.reflow(this._element),t(this._element).addClass(a.SHOW),this._config.focus&&this._enforceFocus();var o=t.Event(s.SHOWN,{relatedTarget:e}),r=function(){i._config.focus&&i._element.focus(),i._isTransitioning=!1,t(i._element).trigger(o)};n?t(this._dialog).one(Util.TRANSITION_END,r).emulateTransitionEnd(300):r()},n.prototype._enforceFocus=function(){var e=this;t(document).off(s.FOCUSIN).on(s.FOCUSIN,function(i){document===i.target||e._element===i.target||t(e._element).has(i.target).length||e._element.focus()})},n.prototype._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?t(this._element).on(s.KEYDOWN_DISMISS,function(t){27===t.which&&e.hide()}):this._isShown||t(this._element).off(s.KEYDOWN_DISMISS)},n.prototype._setResizeEvent=function(){var e=this;this._isShown?t(window).on(s.RESIZE,function(t){return e._handleUpdate(t)}):t(window).off(s.RESIZE)},n.prototype._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden","true"),this._isTransitioning=!1,this._showBackdrop(function(){t(document.body).removeClass(a.OPEN),e._resetAdjustments(),e._resetScrollbar(),t(e._element).trigger(s.HIDDEN)})},n.prototype._removeBackdrop=function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)},n.prototype._showBackdrop=function(e){var i=this,n=t(this._element).hasClass(a.FADE)?a.FADE:"";if(this._isShown&&this._config.backdrop){var o=Util.supportsTransitionEnd()&&n;if(this._backdrop=document.createElement("div"),this._backdrop.className=a.BACKDROP,n&&t(this._backdrop).addClass(n),t(this._backdrop).appendTo(document.body),t(this._element).on(s.CLICK_DISMISS,function(t){if(i._ignoreBackdropClick)return void(i._ignoreBackdropClick=!1);t.target===t.currentTarget&&("static"===i._config.backdrop?i._element.focus():i.hide())}),o&&Util.reflow(this._backdrop),
t(this._backdrop).addClass(a.SHOW),!e)return;if(!o)return void e();t(this._backdrop).one(Util.TRANSITION_END,e).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(a.SHOW);var r=function(){i._removeBackdrop(),e&&e()};Util.supportsTransitionEnd()&&t(this._element).hasClass(a.FADE)?t(this._backdrop).one(Util.TRANSITION_END,r).emulateTransitionEnd(150):r()}else e&&e()},n.prototype._handleUpdate=function(){this._adjustDialog()},n.prototype._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},n.prototype._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},n.prototype._checkScrollbar=function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},n.prototype._setScrollbar=function(){var e=parseInt(t(l.FIXED_CONTENT).css("padding-right")||0,10);this._originalBodyPadding=document.body.style.paddingRight||"",this._isBodyOverflowing&&(document.body.style.paddingRight=e+this._scrollbarWidth+"px")},n.prototype._resetScrollbar=function(){document.body.style.paddingRight=this._originalBodyPadding},n.prototype._getScrollbarWidth=function(){var t=document.createElement("div");t.className=a.SCROLLBAR_MEASURER,document.body.appendChild(t);var e=t.offsetWidth-t.clientWidth;return document.body.removeChild(t),e},n._jQueryInterface=function(e,i){return this.each(function(){var o=t(this).data("bs.modal"),r=t.extend({},n.Default,t(this).data(),"object"===(void 0===e?"undefined":_typeof(e))&&e);if(o||(o=new n(this,r),t(this).data("bs.modal",o)),"string"==typeof e){if(void 0===o[e])throw new Error('No method named "'+e+'"');o[e](i)}else r.show&&o.show(i)})},_createClass(n,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return o}}]),n}();return t(document).on(s.CLICK_DATA_API,l.DATA_TOGGLE,function(e){var i=this,n=void 0,o=Util.getSelectorFromElement(this);o&&(n=t(o)[0]);var r=t(n).data("bs.modal")?"toggle":t.extend({},t(n).data(),t(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var a=t(n).one(s.SHOW,function(e){e.isDefaultPrevented()||a.one(s.HIDDEN,function(){t(i).is(":visible")&&i.focus()})});h._jQueryInterface.call(t(n),r,this)}),t.fn[e]=h._jQueryInterface,t.fn[e].Constructor=h,t.fn[e].noConflict=function(){return t.fn[e]=n,h._jQueryInterface},h}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_createClass=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),Tooltip=function(t){if("undefined"==typeof Tether)throw new Error("Bootstrap tooltips require Tether (http://tether.io/)");var e="tooltip",i=".bs.tooltip",n=t.fn[e],o={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:"0 0",constraints:[],container:!1},r={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"string",constraints:"array",container:"(string|element|boolean)"},s={TOP:"bottom center",RIGHT:"middle left",BOTTOM:"top center",LEFT:"middle right"},a={SHOW:"show",OUT:"out"},l={HIDE:"hide"+i,HIDDEN:"hidden"+i,SHOW:"show"+i,SHOWN:"shown"+i,INSERTED:"inserted"+i,CLICK:"click"+i,FOCUSIN:"focusin"+i,FOCUSOUT:"focusout"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i},h={FADE:"fade",SHOW:"show"},f={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner"},c={element:!1,enabled:!1},d={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},u=function(){function n(t,e){_classCallCheck(this,n),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._isTransitioning=!1,this._tether=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}return n.prototype.enable=function(){this._isEnabled=!0},n.prototype.disable=function(){this._isEnabled=!1},n.prototype.toggleEnabled=function(){this._isEnabled=!this._isEnabled},n.prototype.toggle=function(e){if(e){var i=this.constructor.DATA_KEY,n=t(e.currentTarget).data(i);n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(t(this.getTipElement()).hasClass(h.SHOW))return void this._leave(null,this);this._enter(null,this)}},n.prototype.dispose=function(){clearTimeout(this._timeout),this.cleanupTether(),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),t(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._tether=null,this.element=null,this.config=null,this.tip=null},n.prototype.show=function(){var e=this;if("none"===t(this.element).css("display"))throw new Error("Please use show on visible elements");var i=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){if(this._isTransitioning)throw new Error("Tooltip is transitioning");t(this.element).trigger(i);var o=t.contains(this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!o)return;var r=this.getTipElement(),s=Util.getUID(this.constructor.NAME);r.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&t(r).addClass(h.FADE);var l="function"==typeof this.config.placement?this.config.placement.call(this,r,this.element):this.config.placement,f=this._getAttachment(l),d=!1===this.config.container?document.body:t(this.config.container);t(r).data(this.constructor.DATA_KEY,this).appendTo(d),t(this.element).trigger(this.constructor.Event.INSERTED),this._tether=new Tether({attachment:f,element:r,target:this.element,classes:c,classPrefix:"bs-tether",offset:this.config.offset,constraints:this.config.constraints,addTargetClasses:!1}),Util.reflow(r),this._tether.position(),t(r).addClass(h.SHOW);var u=function(){var i=e._hoverState;e._hoverState=null,e._isTransitioning=!1,t(e.element).trigger(e.constructor.Event.SHOWN),i===a.OUT&&e._leave(null,e)};if(Util.supportsTransitionEnd()&&t(this.tip).hasClass(h.FADE))return this._isTransitioning=!0,void t(this.tip).one(Util.TRANSITION_END,u).emulateTransitionEnd(n._TRANSITION_DURATION);u()}},n.prototype.hide=function(e){var i=this,n=this.getTipElement(),o=t.Event(this.constructor.Event.HIDE);if(this._isTransitioning)throw new Error("Tooltip is transitioning");var r=function(){i._hoverState!==a.SHOW&&n.parentNode&&n.parentNode.removeChild(n),i.element.removeAttribute("aria-describedby"),t(i.element).trigger(i.constructor.Event.HIDDEN),i._isTransitioning=!1,i.cleanupTether(),e&&e()};t(this.element).trigger(o),o.isDefaultPrevented()||(t(n).removeClass(h.SHOW),this._activeTrigger[d.CLICK]=!1,this._activeTrigger[d.FOCUS]=!1,this._activeTrigger[d.HOVER]=!1,Util.supportsTransitionEnd()&&t(this.tip).hasClass(h.FADE)?(this._isTransitioning=!0,t(n).one(Util.TRANSITION_END,r).emulateTransitionEnd(150)):r(),this._hoverState="")},n.prototype.isWithContent=function(){return Boolean(this.getTitle())},n.prototype.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0]},n.prototype.setContent=function(){var e=t(this.getTipElement());this.setElementContent(e.find(f.TOOLTIP_INNER),this.getTitle()),e.removeClass(h.FADE+" "+h.SHOW),this.cleanupTether()},n.prototype.setElementContent=function(e,i){var n=this.config.html;"object"===(void 0===i?"undefined":_typeof(i))&&(i.nodeType||i.jquery)?n?t(i).parent().is(e)||e.empty().append(i):e.text(t(i).text()):e[n?"html":"text"](i)},n.prototype.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},n.prototype.cleanupTether=function(){this._tether&&this._tether.destroy()},n.prototype._getAttachment=function(t){return s[t.toUpperCase()]},n.prototype._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach(function(i){if("click"===i)t(e.element).on(e.constructor.Event.CLICK,e.config.selector,function(t){return e.toggle(t)});else if(i!==d.MANUAL){var n=i===d.HOVER?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,o=i===d.HOVER?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;t(e.element).on(n,e.config.selector,function(t){return e._enter(t)}).on(o,e.config.selector,function(t){return e._leave(t)})}t(e.element).closest(".modal").on("hide.bs.modal",function(){return e.hide()})}),this.config.selector?this.config=t.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},n.prototype._fixTitle=function(){var t=_typeof(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},n.prototype._enter=function(e,i){var n=this.constructor.DATA_KEY;return i=i||t(e.currentTarget).data(n),i||(i=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,i)),e&&(i._activeTrigger["focusin"===e.type?d.FOCUS:d.HOVER]=!0),t(i.getTipElement()).hasClass(h.SHOW)||i._hoverState===a.SHOW?void(i._hoverState=a.SHOW):(clearTimeout(i._timeout),i._hoverState=a.SHOW,i.config.delay&&i.config.delay.show?void(i._timeout=setTimeout(function(){i._hoverState===a.SHOW&&i.show()},i.config.delay.show)):void i.show())},n.prototype._leave=function(e,i){var n=this.constructor.DATA_KEY;if(i=i||t(e.currentTarget).data(n),i||(i=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,i)),e&&(i._activeTrigger["focusout"===e.type?d.FOCUS:d.HOVER]=!1),!i._isWithActiveTrigger()){if(clearTimeout(i._timeout),i._hoverState=a.OUT,!i.config.delay||!i.config.delay.hide)return void i.hide();i._timeout=setTimeout(function(){i._hoverState===a.OUT&&i.hide()},i.config.delay.hide)}},n.prototype._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},n.prototype._getConfig=function(i){return i=t.extend({},this.constructor.Default,t(this.element).data(),i),i.delay&&"number"==typeof i.delay&&(i.delay={show:i.delay,hide:i.delay}),Util.typeCheckConfig(e,i,this.constructor.DefaultType),i},n.prototype._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},n._jQueryInterface=function(e){return this.each(function(){var i=t(this).data("bs.tooltip"),o="object"===(void 0===e?"undefined":_typeof(e))&&e;if((i||!/dispose|hide/.test(e))&&(i||(i=new n(this,o),t(this).data("bs.tooltip",i)),"string"==typeof e)){if(void 0===i[e])throw new Error('No method named "'+e+'"');i[e]()}})},_createClass(n,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return o}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return l}},{key:"EVENT_KEY",get:function(){return i}},{key:"DefaultType",get:function(){return r}}]),n}();return t.fn[e]=u._jQueryInterface,t.fn[e].Constructor=u,t.fn[e].noConflict=function(){return t.fn[e]=n,u._jQueryInterface},u}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_createClass=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),Collapse=function(t){var e="collapse",i="bs.collapse",n=t.fn[e],o={toggle:!0,parent:""},r={toggle:"boolean",parent:"string"},s={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},a={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},l={WIDTH:"width",HEIGHT:"height"},h={ACTIVES:".card > .show, .card > .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},f=function(){function n(e,i){_classCallCheck(this,n),this._isTransitioning=!1,this._element=e,this._config=this._getConfig(i),this._triggerArray=t.makeArray(t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]')),this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return n.prototype.toggle=function(){t(this._element).hasClass(a.SHOW)?this.hide():this.show()},n.prototype.show=function(){var e=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");if(!t(this._element).hasClass(a.SHOW)){var o=void 0,r=void 0;if(this._parent&&(o=t.makeArray(t(this._parent).find(h.ACTIVES)),o.length||(o=null)),!(o&&(r=t(o).data(i))&&r._isTransitioning)){var l=t.Event(s.SHOW);if(t(this._element).trigger(l),!l.isDefaultPrevented()){o&&(n._jQueryInterface.call(t(o),"hide"),r||t(o).data(i,null));var f=this._getDimension();t(this._element).removeClass(a.COLLAPSE).addClass(a.COLLAPSING),this._element.style[f]=0,this._element.setAttribute("aria-expanded",!0),this._triggerArray.length&&t(this._triggerArray).removeClass(a.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var c=function(){t(e._element).removeClass(a.COLLAPSING).addClass(a.COLLAPSE).addClass(a.SHOW),e._element.style[f]="",e.setTransitioning(!1),t(e._element).trigger(s.SHOWN)};if(!Util.supportsTransitionEnd())return void c();var d=f[0].toUpperCase()+f.slice(1),u="scroll"+d;t(this._element).one(Util.TRANSITION_END,c).emulateTransitionEnd(600),this._element.style[f]=this._element[u]+"px"}}}},n.prototype.hide=function(){var e=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");if(t(this._element).hasClass(a.SHOW)){var i=t.Event(s.HIDE);if(t(this._element).trigger(i),!i.isDefaultPrevented()){var n=this._getDimension(),o=n===l.WIDTH?"offsetWidth":"offsetHeight";this._element.style[n]=this._element[o]+"px",Util.reflow(this._element),t(this._element).addClass(a.COLLAPSING).removeClass(a.COLLAPSE).removeClass(a.SHOW),this._element.setAttribute("aria-expanded",!1),this._triggerArray.length&&t(this._triggerArray).addClass(a.COLLAPSED).attr("aria-expanded",!1),this.setTransitioning(!0);var r=function(){e.setTransitioning(!1),t(e._element).removeClass(a.COLLAPSING).addClass(a.COLLAPSE).trigger(s.HIDDEN)};if(this._element.style[n]="",!Util.supportsTransitionEnd())return void r();t(this._element).one(Util.TRANSITION_END,r).emulateTransitionEnd(600)}}},n.prototype.setTransitioning=function(t){this._isTransitioning=t},n.prototype.dispose=function(){t.removeData(this._element,i),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},n.prototype._getConfig=function(i){return i=t.extend({},o,i),i.toggle=Boolean(i.toggle),Util.typeCheckConfig(e,i,r),i},n.prototype._getDimension=function(){return t(this._element).hasClass(l.WIDTH)?l.WIDTH:l.HEIGHT},n.prototype._getParent=function(){var e=this,i=t(this._config.parent)[0],o='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return t(i).find(o).each(function(t,i){e._addAriaAndCollapsedClass(n._getTargetFromElement(i),[i])}),i},n.prototype._addAriaAndCollapsedClass=function(e,i){if(e){var n=t(e).hasClass(a.SHOW);e.setAttribute("aria-expanded",n),i.length&&t(i).toggleClass(a.COLLAPSED,!n).attr("aria-expanded",n)}},n._getTargetFromElement=function(e){var i=Util.getSelectorFromElement(e);return i?t(i)[0]:null},n._jQueryInterface=function(e){return this.each(function(){var r=t(this),s=r.data(i),a=t.extend({},o,r.data(),"object"===(void 0===e?"undefined":_typeof(e))&&e);if(!s&&a.toggle&&/show|hide/.test(e)&&(a.toggle=!1),s||(s=new n(this,a),r.data(i,s)),"string"==typeof e){if(void 0===s[e])throw new Error('No method named "'+e+'"');s[e]()}})},_createClass(n,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return o}}]),n}();return t(document).on(s.CLICK_DATA_API,h.DATA_TOGGLE,function(e){e.preventDefault();var n=f._getTargetFromElement(this),o=t(n).data(i),r=o?"toggle":t(this).data();f._jQueryInterface.call(t(n),r)}),t.fn[e]=f._jQueryInterface,t.fn[e].Constructor=f,t.fn[e].noConflict=function(){return t.fn[e]=n,f._jQueryInterface},f}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
